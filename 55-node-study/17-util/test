const config = require('../config').mysql;
const Sequelize = require('sequelize');
const sequelize = new Sequelize(config.database, config.username, config.password, {
    host: config.host,
    dialect: 'mysql',
    pool: {
        max: 5,
        min: 0,
        acquire: 30000,
        idle: 10000
    },
    logging: config.logging, //处理log的方式
    // 请参考 Querying - 查询 操作符 章节
    operatorsAliases: false,
});
const sequelizeDefine = function (tableName, fields) {
    return sequelize.define(tableName, fields, {
        // 不删除数据库条目，但将新添加的属性deletedAt设置为当前日期（删除完成时）。 
        // paranoid 只有在启用时间戳时才能工作
        paranoid: true,
        createdAt: 'createdAt',
        updatedAt: 'updateAt',
        deletedAt: 'deletedAt',
        // 禁用修改表名; 默认情况下，sequelize将自动将所有传递的模型名称（define的第一个参数）转换为复数。 如果你不想这样，请设置以下内容
        freezeTableName: true,
        // 启用乐观锁定。 启用时，sequelize将向模型添加版本计数属性，
        // 并在保存过时的实例时引发OptimisticLockingError错误。
        // 设置为true或具有要用于启用的属性名称的字符串。
        version: true
    });
}
// 用户
let userFields = {
    id: {
        type: Sequelize.BIGINT(20).UNSIGNED,
        allowNull: false,
        unique: true,
        primaryKey: true,
        autoIncrement: true,
        comment: 'id'
    },
    mobile: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        unique: true,
        comment: '手机号码'
    },
    password: {
        type: Sequelize.STRING(128),
        allowNull: false,
        defaultValue: '',
        comment: '密码'
    },
    avatar: {
        type: Sequelize.STRING(1024),
        allowNull: false,
        defaultValue: '',
        comment: '头像'
    },
    loginName: {
        type: Sequelize.STRING(128),
        allowNull: false,
        defaultValue: '',
        unique: true,
        comment: '登录名'
    },
    email: {
        type: Sequelize.STRING(128),
        allowNull: false,
        defaultValue: '',
        comment: '邮箱'
    },
    verifyCode: {
        type: Sequelize.INTEGER(8).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '验证码'
    },
    expiredTime: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.NOW,
        comment: '失效时间'
    },
    enable: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '是否可用: 1是，2否'
    },
    registFrom: {
        type: Sequelize.INTEGER(2),
        allowNull: false,
        defaultValue: 0,
        comment: '注册方式: 1PC，2mobile，3wechat'
    },
    remarks: {
        type: Sequelize.STRING(256),
        allowNull: false,
        defaultValue: '',
        comment: '备注信息'
    }
};
// 账户
let accountFields = {
    id: {
        type: Sequelize.BIGINT(20).UNSIGNED,
        allowNull: false,
        unique: true,
        primaryKey: true,
        autoIncrement: true,
        comment: 'id'
    },
    uId: {
        type: Sequelize.BIGINT(20).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        unique: true,
        comment: '用户id'
    },
    vipLevel: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '会员等级: 1普通会员，2高级会员'
    },
    balance: {
        type: Sequelize.DOUBLE(10, 2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '余额'
    },
    idCardPicFront: {
        type: Sequelize.STRING(1024),
        allowNull: false,
        defaultValue: '',
        comment: '身份证正面'
    },
    idCardPicBack: {
        type: Sequelize.STRING(1024),
        allowNull: false,
        defaultValue: '',
        comment: '身份证背面'
    },
    name: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        comment: '姓名'
    },
    idCard: {
        type: Sequelize.STRING(18),
        allowNull: false,
        defaultValue: '',
        comment: '身份证号'
    },
    authStatus: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '认证状态: 1未认证，2已认证，3已拒绝'
    },
    bId: {
        type: Sequelize.INTEGER(20).UNSIGNED,
        comment: '默认银行卡'
    }
};
// 管理员
let adminUserFields = {
    id: {
        type: Sequelize.BIGINT(20).UNSIGNED,
        allowNull: false,
        unique: true,
        primaryKey: true,
        autoIncrement: true,
        comment: 'id'
    },
    mobile: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        unique: true,
        comment: '手机号码'
    },
    password: {
        type: Sequelize.STRING(128),
        allowNull: false,
        defaultValue: '',
        comment: '密码'
    },
    avatar: {
        type: Sequelize.STRING(1024),
        allowNull: false,
        defaultValue: '',
        comment: '头像'
    },
    loginName: {
        type: Sequelize.STRING(128),
        allowNull: false,
        defaultValue: '',
        unique: true,
        comment: '登录名'
    },
    email: {
        type: Sequelize.STRING(128),
        allowNull: false,
        defaultValue: '',
        comment: '邮箱'
    },
    no: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        comment: '工号'
    },
    createBy: {
        type: Sequelize.STRING(128),
        allowNull: false,
        defaultValue: '',
        comment: '创建者'
    },
    updateBy: {
        type: Sequelize.STRING(128),
        allowNull: false,
        defaultValue: '',
        comment: '更新者'
    },
    remarks: {
        type: Sequelize.STRING(256),
        allowNull: false,
        defaultValue: '',
        comment: '备注信息'
    }
};
// 提现记录
let bankInfoFields = {
    id: {
        type: Sequelize.BIGINT(20).UNSIGNED,
        allowNull: false,
        unique: true,
        primaryKey: true,
        autoIncrement: true,
        comment: 'id'
    },
    uId: {
        type: Sequelize.BIGINT(20).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        unique: true,
        comment: '用户id'
    },
    vipLevel: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '会员等级: 1普通会员，2高级会员'
    },
    balance: {
        type: Sequelize.DOUBLE(10, 2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '余额'
    },
    idCardPicFront: {
        type: Sequelize.STRING(1024),
        allowNull: false,
        defaultValue: '',
        comment: '身份证正面'
    },
    idCardPicBack: {
        type: Sequelize.STRING(1024),
        allowNull: false,
        defaultValue: '',
        comment: '身份证背面'
    },
    name: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        comment: '姓名'
    },
    idCard: {
        type: Sequelize.STRING(18),
        allowNull: false,
        defaultValue: '',
        comment: '身份证号'
    },
    authStatus: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '认证状态: 1未认证，2已认证，3已拒绝'
    },
    bId: {
        type: Sequelize.INTEGER(20).UNSIGNED,
        comment: '默认银行卡'
    }
};
// 项目基础信息
let projectBaseFields = {
    id: {
        type: Sequelize.BIGINT(20).UNSIGNED,
        allowNull: false,
        unique: true,
        primaryKey: true,
        autoIncrement: true,
        comment: 'id'
    },
    uId: {
        type: Sequelize.BIGINT(20).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '用户id'
    },
    projectName: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        comment: '活动名称'
    },
    startTime: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.NOW,
        comment: '活动开始时间'
    },
    endTime: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.NOW,
        comment: '活动结束时间'
    },
    projectIntroduction: {
        type: Sequelize.TEXT,
        allowNull: false,
        defaultValue: '',
        comment: '活动内容介绍'
    },
    bannerType: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '活动封面类型:码表（1图片封面，2视频封面）'
    },
    bannerSrc: {
        type: Sequelize.STRING(1024),
        allowNull: false,
        defaultValue: '',
        comment: '活动封面资源位置'
    },
    theme: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '主题设置:码表（0默认，1萌娃，2清晰，3浪漫，4商务，5爱国，6万圣节，7双十一）'
    },
    themeColor: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '配色设置'
    },
    signUpDeadline: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '选手报名截止时间段:码表（1活动结束前，2活动开始前）'
    },
    isGroup: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '选手是否分组:码表（1分组，2不分组）'
    },
    groupNameList: {
        type: Sequelize.TEXT,
        allowNull: false,
        defaultValue: '',
        comment: '分组名称:多个名字逗号分隔'
    },
    playerSort: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '选手排序方式:码表（1编号从低到高，2票数从高到低，3报名时间倒序）'
    },
    floatingObject: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '漂浮物设置:码表（0无，1，2，...）'
    },
    backgroundMusic: {
        type: Sequelize.STRING(1024),
        allowNull: false,
        defaultValue: '',
        comment: '背景音乐'
    },
    customName: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        comment: '自定义名称'
    },
    customNameProperty: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '自定义名称属性:码表（1必填，2选填，3隐藏）'
    },
    customPic: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        comment: '自定义图片'
    },
    customPicProperty: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '自定义图片属性:码表（1必填，2选填，3隐藏）'
    },
    customDescription: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        comment: '自定义描述项'
    },
    customDescriptionProperty: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '自定义描述项属性:码表（1必填，2选填，3隐藏）'
    },
    customMobile: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        comment: '自定义描述项'
    },
    customMobileProperty: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '自定义描述项属性:码表（1必填，2选填）'
    },
    customItem1: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        comment: '自定义配置项1'
    },
    customItemProperty1: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '自定义配置项属性1:码表（1必填，2选填）'
    },
    customItem2: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        comment: '自定义配置项2'
    },
    customItemProperty2: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '自定义配置项属性2:码表（1必填，2选填）'
    },
    customItem3: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        comment: '自定义配置项3'
    },
    customItemProperty3: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '自定义配置项属性3:码表（1必填，2选填）'
    },
    hasActivityNotice: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '是否启用活动公告:码表（1启用，2不启用）'
    },
    projectNotice: {
        type: Sequelize.STRING(256),
        allowNull: false,
        defaultValue: '',
        comment: '活动公告内容'
    }
};
// todo 项目配置表 需要动的字段较多，先留着
let projectSettingFields = {
    id: {
        type: Sequelize.BIGINT(20).UNSIGNED,
        allowNull: false,
        unique: true,
        primaryKey: true,
        autoIncrement: true,
        comment: 'id'
    },
    bId: {
        type: Sequelize.BIGINT(20).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '项目信息表id'
    },
    signUpNeedReview: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '报名审核模式:码表（1需要审核，2无需审核）'
    },
    startTime: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.NOW,
        comment: '活动开始时间'
    },
    endTime: {
        type: Sequelize.DATE,
        allowNull: false,
        defaultValue: Sequelize.NOW,
        comment: '活动结束时间'
    },
    projectIntroduction: {
        type: Sequelize.TEXT,
        allowNull: false,
        defaultValue: '',
        comment: '活动内容介绍'
    },
    bannerType: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '活动封面类型:码表（1图片封面，2视频封面）'
    },
    bannerSrc: {
        type: Sequelize.STRING(1024),
        allowNull: false,
        defaultValue: '',
        comment: '活动封面资源位置'
    },
    theme: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '主题设置:码表（0默认，1萌娃，2清晰，3浪漫，4商务，5爱国，6万圣节，7双十一）'
    },
    themeColor: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '配色设置'
    },
    signUpDeadline: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '选手报名截止时间段:码表（1活动结束前，2活动开始前）'
    },
    isGroup: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '选手是否分组:码表（1分组，2不分组）'
    },
    groupNameList: {
        type: Sequelize.TEXT,
        allowNull: false,
        defaultValue: '',
        comment: '分组名称:多个名字逗号分隔'
    },
    playerSort: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '选手排序方式:码表（1编号从低到高，2票数从高到低，3报名时间倒序）'
    },
    floatingObject: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '漂浮物设置:码表（0无，1，2，...）'
    },
    backgroundMusic: {
        type: Sequelize.STRING(1024),
        allowNull: false,
        defaultValue: '',
        comment: '背景音乐'
    },
    customName: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        comment: '自定义名称'
    },
    customNameProperty: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '自定义名称属性:码表（1必填，2选填，3隐藏）'
    },
    customPic: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        comment: '自定义图片'
    },
    customPicProperty: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '自定义图片属性:码表（1必填，2选填，3隐藏）'
    },
    customDescription: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        comment: '自定义描述项'
    },
    customDescriptionProperty: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '自定义描述项属性:码表（1必填，2选填，3隐藏）'
    },
    customMobile: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        comment: '自定义描述项'
    },
    customMobileProperty: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '自定义描述项属性:码表（1必填，2选填）'
    },
    customItem1: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        comment: '自定义配置项1'
    },
    customItemProperty1: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '自定义配置项属性1:码表（1必填，2选填）'
    },
    customItem2: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        comment: '自定义配置项2'
    },
    customItemProperty2: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '自定义配置项属性2:码表（1必填，2选填）'
    },
    customItem3: {
        type: Sequelize.STRING(16),
        allowNull: false,
        defaultValue: '',
        comment: '自定义配置项3'
    },
    customItemProperty3: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '自定义配置项属性3:码表（1必填，2选填）'
    },
    hasActivityNotice: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '是否启用活动公告:码表（1启用，2不启用）'
    },
    projectNotice: {
        type: Sequelize.STRING(256),
        allowNull: false,
        defaultValue: '',
        comment: '活动公告内容'
    }
};
// todo 选手表 也是一样
let playerFields = {
    playerId: {
        type: Sequelize.INTEGER(20).UNSIGNED,
        allowNull: false,
        unique: true,
        primaryKey: true,
        autoIncrement: true
    },
    projectId: {
        type: Sequelize.INTEGER(20).UNSIGNED,
        allowNull: false
    },
    signUpType: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0
    },
    isPlayerPermission: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0
    },
    playerName: {
        type: Sequelize.STRING(20),
        defaultValue: ''
    },
    playerPicList: {
        type: Sequelize.STRING(3000),
        defaultValue: ''
    },
    playerMobile: {
        type: Sequelize.STRING(20),
        defaultValue: ''
    },
    groupId: {
        type: Sequelize.STRING(4),
        defaultValue: ''
    },
    playerDescription: {
        type: Sequelize.STRING(128),
        defaultValue: ''
    },
    playerVideo: {
        type: Sequelize.STRING(1000),
        defaultValue: ''
    },
    customConfItemVal: {
        type: Sequelize.TEXT,
        defaultValue: ''
    }
};
// 投票记录
let voteFlowFields = {
    id: {
        type: Sequelize.BIGINT(20).UNSIGNED,
        allowNull: false,
        unique: true,
        primaryKey: true,
        autoIncrement: true,
        comment: 'id'
    },
    uId: {
        type: Sequelize.BIGINT(20).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '用户id'
    },
    pId: {
        type: Sequelize.BIGINT(20).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '项目id'
    },
    playerId: {
        type: Sequelize.BIGINT(20).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '选手id'
    },
    openId: {
        type: Sequelize.STRING(64),
        allowNull: false,
        defaultValue: '',
        comment: '选举人openId'
    },
    giftType: {
        type: Sequelize.INTEGER(2).UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '礼物类型:码表（0普通投标，1小星星，2棒棒糖，3打CALL，3么么哒，4666，5旋转木马，6炫酷跑车，7火箭，8梦幻城堡）'
    },
    giftQuantity: {
        type: Sequelize.INTEGER().UNSIGNED,
        allowNull: false,
        defaultValue: 0,
        comment: '礼物数量'
    },
    orderMoney: {
        type: Sequelize.DOUBLE(10, 2),
        allowNull: false,
        defaultValue: 0,
        comment: '交易金额'
    }
};
// 银行卡信息
let accountFlowFields = {
    bankCardAutoId: {
        type: Sequelize.INTEGER(20).UNSIGNED,
        allowNull: false,
        unique: true,
        primaryKey: true,
        autoIncrement: true
    },
    userId: {
        type: Sequelize.INTEGER(20).UNSIGNED,
        allowNull: false,
        // references: {
        //     // 这是引用另一个模型
        //     model: User,
        //    
        //     // 这是引用模型的列名称
        //     key: 'userId'
        // }
    },
    bankName: {
        type: Sequelize.STRING(100),
        defaultValue: ''
    },
    openingBank: {
        type: Sequelize.STRING(100),
        defaultValue: ''
    },
    huName: {
        type: Sequelize.STRING(20),
        defaultValue: ''
    },
    bankCardNum: {
        type: Sequelize.STRING(100),
        defaultValue: '',
        unique: true
    }
};



let user = sequelizeDefine('user', userFields);
let adminUser = sequelizeDefine('adminUser', adminUserFields);
let account = sequelizeDefine('account', accountFields);
let projectBase = sequelizeDefine('projectBase', projectBaseFields);
let projectSetting = sequelizeDefine('projectSetting', projectSettingFields);
// let player = sequelizeDefine('player', playerFields);
let voteFlow = sequelizeDefine('voteFlow', voteFlowFields);
// let bankInfo = sequelizeDefine('bankInfo', bankInfoFields);
// let accountFlow = sequelizeDefine('accountFlow', accountFlowFields);

user.sync({force: true});
adminUser.sync();

// (async () => {
//     await voteFlow.sync();
//     let a = await voteFlow.create({
//         uId: 1048575111111112
//     });
//     // let b = await voteFlow.findOne({
//     //     where: {
//     //         uId: 1048575111111111
//     //     }
//     // });
//     // b.update({
//     //     pId: 12311
//     // });
// })().catch(e => {
//     console.log('---------------原始报错信息-------------');
//     console.log(JSON.stringify(e));
//     console.log('---------------error-------------');
//     console.log(`sqlMessage: ${e.original.sqlMessage}`);
//     console.log(`sql: ${e.original.sql}`);
//
// })



// mysql事务操作
// sequelize.transaction(function (t) {

//     // 在这里链接您的所有查询。 确保你返回他们。
//     return User.create({
//         username: 'BobKing1',
//         password: sha256('BobKing', '1231212')
//     }, { transaction: t }).then(function (user) {
//         console.log(`刚被插入的数据为${JSON.stringify(user)}`);
//         return User.create({
//             username: 'BobKing1',
//             password: sha256('BobKing', '1231212')
//         }, { transaction: t });
//     });

// }).then(function (result) {
//     console.log(`事务操作执行成功`);
//     console.log(result);
//     // 事务已被提交
//     // result 是 promise 链返回到事务回调的结果
// }).catch(function (err) {
//     console.log('事务已经被回滚');
//     console.log(err.message);

//     // 事务已被回滚
//     // err 是拒绝 promise 链返回到事务回调的错误
// })

module.exports = {
    user,
    adminUser
};
